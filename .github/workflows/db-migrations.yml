name: Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy migrations to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      dry_run:
        description: 'Perform a dry run (preview only)'
        required: false
        default: false
        type: boolean
      force:
        description: 'Force migration (use with caution)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  validate-migrations:
    name: Validate Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate migration files
        run: |
          cd packages/db-schema
          echo "🔍 Checking migration files..."
          ls -la migrations/
          
          echo "📋 Migration file count:"
          find migrations/ -name "*.sql" | wc -l
          
          echo "📝 Latest migrations:"
          find migrations/ -name "*.sql" | sort | tail -5

      - name: Check migration syntax
        run: |
          cd packages/db-schema
          echo "🔍 Validating SQL syntax in migration files..."
          for file in migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              # Basic SQL syntax validation (you can extend this)
              if ! grep -q ";" "$file"; then
                echo "Warning: $file might be missing semicolons"
              fi
            fi
          done

  deploy-migrations:
    name: Deploy Migrations (${{ github.event.inputs.environment }})
    runs-on: ubuntu-latest
    needs: validate-migrations
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Show migration plan
        run: |
          echo "## 📋 Migration Plan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Force:** ${{ github.event.inputs.force }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Migration files to be applied:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ls -la packages/db-schema/migrations/ >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Preview migrations (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🔍 DRY RUN: Previewing migrations for ${{ github.event.inputs.environment }}..."
          echo "This would run: wrangler d1 migrations apply TREKSISTEM_DB --env ${{ github.event.inputs.environment }}"
          
          echo "## 👀 Migration Preview (Dry Run)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Migrations validated successfully" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Ready to apply to ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**To apply these migrations for real, run this workflow again with 'Perform a dry run' unchecked.**" >> $GITHUB_STEP_SUMMARY

      - name: Apply migrations to development
        if: github.event.inputs.environment == 'development' && github.event.inputs.dry_run != 'true'
        run: |
          echo "🚀 Applying migrations to development environment..."
          wrangler d1 migrations apply TREKSISTEM_DB --env development
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Apply migrations to staging
        if: github.event.inputs.environment == 'staging' && github.event.inputs.dry_run != 'true'
        run: |
          echo "🚀 Applying migrations to staging environment..."
          wrangler d1 migrations apply TREKSISTEM_DB --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Apply migrations to production
        if: github.event.inputs.environment == 'production' && github.event.inputs.dry_run != 'true'
        run: |
          echo "🚀 Applying migrations to production environment..."
          echo "⚠️  PRODUCTION MIGRATION - Proceeding with caution..."
          wrangler d1 migrations apply TREKSISTEM_DB --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Migration Summary
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "## ✅ Migration Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Applied at:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "👤 **Applied by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Next steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Verify database schema in Cloudflare Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- Test application functionality" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor for any migration-related issues" >> $GITHUB_STEP_SUMMARY

  post-migration-checks:
    name: Post-Migration Checks
    runs-on: ubuntu-latest
    needs: deploy-migrations
    if: github.event.inputs.dry_run != 'true'
    steps:
      - name: Wait for migration to settle
        run: sleep 30

      - name: Basic connectivity check
        run: |
          echo "🔍 Performing post-migration checks..."
          echo "Migration for ${{ github.event.inputs.environment }} completed."
          echo "Manual verification recommended in Cloudflare Dashboard."
          
          echo "## 🔍 Post-Migration Checklist" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Check Cloudflare D1 Dashboard for migration status" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Verify application can connect to database" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Test critical database operations" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Monitor application logs for errors" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Validate data integrity if applicable" >> $GITHUB_STEP_SUMMARY 